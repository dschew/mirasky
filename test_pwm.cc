 //======================================================================================/** \file mirasky.cc *      This file contains a program to run the Mirasky Para-Ceres Aircraft. *	Current tasks: *	    1. Operate linear actuators with a closed control loop *		a) Read input from RC controller (RC PWM signal) *		b) Take PWM signal and find the duty cycle *		c) Convert into a digital value which represents distance to move *		d) Operate motor to move that distance *		e) Read A/D converter value for actual position *		f) Adjust position accordingly *	    2. Read two 6 DOF sensors (6 A/D converter channels each) *	    3. Read three accelerometers (1 A/D converter channel each) *	    4. Read three gyros (1 A/D converter channel each) * *  Revisions *    \li  02-26-08  LTD  Original file *    \li  03-01-08  LTD  Writing code *    \li  04-01-08  DSC  Mirasky is born *    \li  04-05-08  DSC  Structure created *    \li  04-08-08  DSC  Basic classes included *///======================================================================================                                            // System headers included with < >#include <stdlib.h>                         // Standard C library#include <avr/io.h>                         // Input-output ports, special registers#include <avr/interrupt.h>                  // Interrupt handling functions#include <stdint.h>                                            // User written headers included with " "#include "avr_serial.h"#include "task_actuator.h"#define  BAUD_DIV        52                 // For Mega128 with 8MHz crystal/** The main function is the "entry point" of every C program, the one which runs first *  (after standard setup code has finished). For mechatronics programs, main() runs an *  infinite loop and never exits.  */int main (){	rs232 the_serial_port(BAUD_DIV,1);	task_timer the_timer;	time_stamp the_timestamp;	task_actuator actuator(&the_serial_port, &the_timer, &the_timestamp);	the_serial_port << "hey" << endl;	// Turn on interrupt processing so the timer can work	sei ();	// Run the main scheduling loop, in which the tasks are continuously scheduled.	// This program currently uses very simple "round robin" scheduling in which the	// tasks are simply called in order. More sophisticated scheduling strategies	// will be used in other more sophisticated programs	while (true)	{		actuator.schedule (the_timer.get_time_now ());	}	return (0);}